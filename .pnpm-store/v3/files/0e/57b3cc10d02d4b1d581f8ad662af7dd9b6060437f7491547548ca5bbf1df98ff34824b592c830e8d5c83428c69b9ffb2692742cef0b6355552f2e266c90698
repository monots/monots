"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DocTagDocListPage;

var _react = _interopRequireDefault(require("react"));

var _Layout = _interopRequireDefault(require("@theme/Layout"));

var _Link = _interopRequireDefault(require("@docusaurus/Link"));

var _themeCommon = require("@docusaurus/theme-common");

var _Translate = _interopRequireWildcard(require("@docusaurus/Translate"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Very simple pluralization: probably good enough for now
function useNDocsTaggedPlural() {
  const {
    selectMessage
  } = (0, _themeCommon.usePluralForm)();
  return count => selectMessage(count, (0, _Translate.translate)({
    id: 'theme.docs.tagDocListPageTitle.nDocsTagged',
    description: 'Pluralized label for "{count} docs tagged". Use as much plural forms (separated by "|") as your language support (see https://www.unicode.org/cldr/cldr-aux/charts/34/supplemental/language_plural_rules.html)',
    message: 'One doc tagged|{count} docs tagged'
  }, {
    count
  }));
}

function DocItem({
  doc
}) {
  return <article className="margin-vert--lg">
      <_Link.default to={doc.permalink}>
        <h2>{doc.title}</h2>
      </_Link.default>
      {doc.description && <p>{doc.description}</p>}
    </article>;
}

function DocTagDocListPage({
  tag
}) {
  const nDocsTaggedPlural = useNDocsTaggedPlural();
  const title = (0, _Translate.translate)({
    id: 'theme.docs.tagDocListPageTitle',
    description: 'The title of the page for a docs tag',
    message: '{nDocsTagged} with "{tagName}"'
  }, {
    nDocsTagged: nDocsTaggedPlural(tag.docs.length),
    tagName: tag.name
  });
  return <_Layout.default title={title} wrapperClassName={_themeCommon.ThemeClassNames.wrapper.docPages} pageClassName={_themeCommon.ThemeClassNames.page.docsTagDocListPage} searchMetadatas={{
    // assign unique search tag to exclude this page from search results!
    tag: 'doc_tag_doc_list'
  }}>
      <div className="container margin-vert--lg">
        <div className="row">
          <main className="col col--8 col--offset-2">
            <header className="margin-bottom--xl">
              <h1>{title}</h1>
              <_Link.default href={tag.allTagsPath}>
                <_Translate.default id="theme.tags.tagsPageLink" description="The label of the link targeting the tag list page">
                  View All Tags
                </_Translate.default>
              </_Link.default>
            </header>
            <section className="margin-vert--lg">
              {tag.docs.map(doc => <DocItem key={doc.id} doc={doc} />)}
            </section>
          </main>
        </div>
      </div>
    </_Layout.default>;
}