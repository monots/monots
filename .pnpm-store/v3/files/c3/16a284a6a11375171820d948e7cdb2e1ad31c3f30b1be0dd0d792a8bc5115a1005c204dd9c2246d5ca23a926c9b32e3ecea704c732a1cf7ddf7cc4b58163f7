"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DocItem;

var _react = _interopRequireDefault(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _useDocs = require("@theme/hooks/useDocs");

var _useWindowSize = _interopRequireDefault(require("@theme/hooks/useWindowSize"));

var _DocPaginator = _interopRequireDefault(require("@theme/DocPaginator"));

var _DocVersionBanner = _interopRequireDefault(require("@theme/DocVersionBanner"));

var _Seo = _interopRequireDefault(require("@theme/Seo"));

var _DocItemFooter = _interopRequireDefault(require("@theme/DocItemFooter"));

var _TOC = _interopRequireDefault(require("@theme/TOC"));

var _TOCCollapsible = _interopRequireDefault(require("@theme/TOCCollapsible"));

var _Heading = require("@theme/Heading");

var _stylesModule = _interopRequireDefault(require("./styles.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function DocItem(props) {
  const {
    content: DocContent,
    versionMetadata
  } = props;
  const {
    metadata,
    frontMatter
  } = DocContent;
  const {
    image,
    keywords,
    hide_title: hideTitle,
    hide_table_of_contents: hideTableOfContents
  } = frontMatter;
  const {
    description,
    title
  } = metadata;
  const {
    pluginId
  } = (0, _useDocs.useActivePlugin)({
    failfast: true
  });
  const versions = (0, _useDocs.useVersions)(pluginId); // If site is not versioned or only one version is included
  // we don't show the version badge
  // See https://github.com/facebook/docusaurus/issues/3362

  const showVersionBadge = versions.length > 1; // We only add a title if:
  // - user asks to hide it with frontmatter
  // - the markdown content does not already contain a top-level h1 heading

  const shouldAddTitle = !hideTitle && typeof DocContent.contentTitle === 'undefined';
  const windowSize = (0, _useWindowSize.default)();
  const canRenderTOC = !hideTableOfContents && DocContent.toc && DocContent.toc.length > 0;
  const renderTocDesktop = canRenderTOC && (windowSize === 'desktop' || windowSize === 'ssr');
  return <>
      <_Seo.default {...{
      title,
      description,
      keywords,
      image
    }} />

      <div className="row">
        <div className={(0, _clsx.default)('col', {
        [_stylesModule.default.docItemCol]: !hideTableOfContents
      })}>
          <_DocVersionBanner.default versionMetadata={versionMetadata} />
          <div className={_stylesModule.default.docItemContainer}>
            <article>
              {showVersionBadge && <span className="badge badge--secondary">
                  Version: {versionMetadata.label}
                </span>}

              {canRenderTOC && <_TOCCollapsible.default toc={DocContent.toc} className={_stylesModule.default.tocMobile} />}

              <div className="markdown">
                {
                /*
                Title can be declared inside md content or declared through frontmatter and added manually
                To make both cases consistent, the added title is added under the same div.markdown block
                See https://github.com/facebook/docusaurus/pull/4882#issuecomment-853021120
                */
              }
                {shouldAddTitle && <_Heading.MainHeading>{title}</_Heading.MainHeading>}

                <DocContent />
              </div>

              <_DocItemFooter.default {...props} />
            </article>

            <_DocPaginator.default metadata={metadata} />
          </div>
        </div>
        {renderTocDesktop && <div className="col col--3">
            <_TOC.default toc={DocContent.toc} />
          </div>}
      </div>
    </>;
}