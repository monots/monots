"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavLink = NavLink;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Link = _interopRequireDefault(require("@docusaurus/Link"));

var _useBaseUrl = _interopRequireDefault(require("@docusaurus/useBaseUrl"));

var _IconExternalLink = _interopRequireDefault(require("@theme/IconExternalLink"));

var _isInternalUrl = _interopRequireDefault(require("@docusaurus/isInternalUrl"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const dropdownLinkActiveClass = 'dropdown__link--active';

function NavLink({
  activeBasePath,
  activeBaseRegex,
  to,
  href,
  label,
  activeClassName = '',
  prependBaseUrlToHref,
  ...props
}) {
  var _props$className;

  // TODO all this seems hacky
  // {to: 'version'} should probably be forbidden, in favor of {to: '/version'}
  const toUrl = (0, _useBaseUrl.default)(to);
  const activeBaseUrl = (0, _useBaseUrl.default)(activeBasePath);
  const normalizedHref = (0, _useBaseUrl.default)(href, {
    forcePrependBaseUrl: true
  });
  const isExternalLink = label && href && !(0, _isInternalUrl.default)(href);
  const isDropdownLink = activeClassName === dropdownLinkActiveClass;
  return <_Link.default {...href ? {
    href: prependBaseUrlToHref ? normalizedHref : href
  } : {
    isNavLink: true,
    activeClassName: !((_props$className = props.className) !== null && _props$className !== void 0 && _props$className.includes(activeClassName)) ? activeClassName : '',
    to: toUrl,
    ...(activeBasePath || activeBaseRegex ? {
      isActive: (_match, location) => activeBaseRegex ? new RegExp(activeBaseRegex).test(location.pathname) : location.pathname.startsWith(activeBaseUrl)
    } : null)
  }} {...props}>
      {isExternalLink ? <span>
          {label}
          <_IconExternalLink.default {...isDropdownLink && {
        width: 12,
        height: 12
      }} />
        </span> : label}
    </_Link.default>;
}

function DefaultNavbarItemDesktop({
  className,
  isDropdownItem = false,
  ...props
}) {
  const element = <NavLink className={(0, _clsx.default)(isDropdownItem ? 'dropdown__link' : 'navbar__item navbar__link', className)} {...props} />;

  if (isDropdownItem) {
    return <li>{element}</li>;
  }

  return element;
}

function DefaultNavbarItemMobile({
  className,
  isDropdownItem: _isDropdownItem,
  ...props
}) {
  return <li className="menu__list-item">
      <NavLink className={(0, _clsx.default)('menu__link', className)} {...props} />
    </li>;
}

function DefaultNavbarItem({
  mobile = false,
  position: _position,
  // Need to destructure position from props so that it doesn't get passed on.
  ...props
}) {
  const Comp = mobile ? DefaultNavbarItemMobile : DefaultNavbarItemDesktop;
  return <Comp {...props} activeClassName={(0, _index.getInfimaActiveClassName)(mobile)} />;
}

var _default = DefaultNavbarItem;
exports.default = _default;