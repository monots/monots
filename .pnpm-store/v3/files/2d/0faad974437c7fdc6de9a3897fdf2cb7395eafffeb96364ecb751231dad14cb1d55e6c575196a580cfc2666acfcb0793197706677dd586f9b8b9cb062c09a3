"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Head = _interopRequireDefault(require("@docusaurus/Head"));

var _Link = _interopRequireDefault(require("@docusaurus/Link"));

var _CodeBlock = _interopRequireDefault(require("@theme/CodeBlock"));

var _Heading = _interopRequireDefault(require("@theme/Heading"));

var _Details = _interopRequireDefault(require("@theme/Details"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// MDX elements are wrapped through the MDX pragma
// In some cases (notably usage with Head/Helmet) we need to unwrap those elements.
function unwrapMDXElement(element) {
  var _element$props, _element$props2;

  if (element !== null && element !== void 0 && (_element$props = element.props) !== null && _element$props !== void 0 && _element$props.mdxType && element !== null && element !== void 0 && (_element$props2 = element.props) !== null && _element$props2 !== void 0 && _element$props2.originalType) {
    const {
      mdxType,
      originalType,
      ...newProps
    } = element.props;
    return _react.default.createElement(element.props.originalType, newProps);
  }

  return element;
}

const MDXComponents = {
  head: props => {
    const unwrappedChildren = _react.default.Children.map(props.children, child => unwrapMDXElement(child));

    return <_Head.default {...props}>{unwrappedChildren}</_Head.default>;
  },
  code: props => {
    const {
      children
    } = props; // For retrocompatibility purposes (pretty rare use case)
    // See https://github.com/facebook/docusaurus/pull/1584

    if ((0, _react.isValidElement)(children)) {
      return children;
    }

    return !children.includes('\n') ? <code {...props} /> : <_CodeBlock.default {...props} />;
  },
  a: props => <_Link.default {...props} />,
  pre: props => {
    var _children$props;

    const {
      children
    } = props; // See comment for `code` above

    if ((0, _react.isValidElement)(children) && (0, _react.isValidElement)(children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.children)) {
      return children === null || children === void 0 ? void 0 : children.props.children;
    }

    return <_CodeBlock.default {...(0, _react.isValidElement)(children) ? children === null || children === void 0 ? void 0 : children.props : { ...props
    }} />;
  },
  details: props => {
    const items = _react.default.Children.toArray(props.children); // Split summary item from the rest to pass it as a separate prop to the Detais theme component


    const summary = items.find(item => {
      var _item$props;

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.mdxType) === 'summary';
    });
    const children = <>{items.filter(item => item !== summary)}</>;
    return <_Details.default {...props} summary={summary}>
        {children}
      </_Details.default>;
  },
  h1: (0, _Heading.default)('h1'),
  h2: (0, _Heading.default)('h2'),
  h3: (0, _Heading.default)('h3'),
  h4: (0, _Heading.default)('h4'),
  h5: (0, _Heading.default)('h5'),
  h6: (0, _Heading.default)('h6')
};
var _default = MDXComponents;
exports.default = _default;